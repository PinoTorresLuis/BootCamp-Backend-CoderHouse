SENTENCIAS MYSQL:
SELECT: PARA SELECCIONAR LA TABLA EN LA QUE QUIERO TRABAJAR
* INDICA QUE AGARRE TODO LO QUE PROVIENE DE ESA TABLA
SI ESCRIBRO, SELECT edad,nombre FROM Empleados, me devuelve solo esos campos

OPERADORES LÓGICOS:
AND , OR , NOT COMO YA LOS CONOCEMOS

UPDATE = ACTUALIZA EJ: UPDATE turnos_medicos SET horario(campo) = "10:30" y me cambia el registro de ese campo

WHERE funciona como el IF para cumplir una condicion. Y a su vez esta clausula no podemos hacer referencia a la funcion de agrupacion

ORDER BY ME ORDENA LA TABLA SEGÚN COMO YO LE INDIQUE. EJ
BETWEEN : FUNCIONA PARA DAR UN RANGO ENTRE LO QUE QUIERO BUSCAR COMO SI PUSIESE >= AND <=.EJ: WHERE Price BETWEEN 50 AND 70

NOT FUNCIONA COMO NEGACION, POR EJEMPLO WHERE NOT COUNTRY = "USA" POR ENDE DECIMOS QUE ME TRAIGAS TODOS LO QUE NO SON DE USA

LIMIT SIRVE PARA PONER UN LIMITE A LA CANTIDAD DE REGISTROS QUE QUEREMOS QUE NOS MUESTRE

LIKE ME TRAE SEGÚN LO QUE YO INDIQUE : EJ: 
SELECT * FROM Employees WHERE Lastname LIKE "%r%" En este caso va a traer a TODOS los apellidos que contengan una R. Por ende, según donde yo coloque los porcentajes es lo que va a cumplir. %r es que tenga una R atrás. r% Es que termine una R

IS NULL = EN LA ESCALA JERARQUICA LOS NULL SON LOS QUE "MENOS" PESO TIENEN, POR ENDE, SE VAN A POSICIONAR PRIMERO SIEMPRE. NOSOTROS LOS PODEMOS ACOMODAR CON LOS ORDER BY ASC O DESC
NOT NULL = PODEMOS DECIR LO MISMO, QUE ORDENE LOS PRODUCTOS POR LOS VALORES QUE NO SEAN NULOS. EJ: WHERE ProductName IS NOT NULL. Te devuelve todos los valores MENOS los null

CON IN PODEMS HACER UNA SUBCONSULTA DENTRO DE OTRA CONSULTA. 
PODRIAMOS MEZCLAR UN FOREIN KEY CON UNA KEY PERO , NO ES LA MEJOR FORMA. PARA ESO EXISTE JOIN
OPERADOR IN 
SELECT * FROM PRODUCTS 
WHERE SupplierID = 3 
OR SupplierID = 2
OR SupplierID = 5

Es lo mismo que escribir 
WHERE SupplierID IN (3,2,5). DENTRO DEL CAMPO SUPPLIER ID SE FIJA REGISTRO POR REGISTRO SI CUMPLE LA CONDICIÓN. SI ES ASÍ, LA DEVUELVE

EJ: 
WHERE LastName in ("Fuller","King").
y también podes hacer lo mismo pero NOT IN te va a traer TODOS menos los que estén en el parametro

ESTE OPERADOR IN SE PUEDE UTILIZAR EN LA CLAUSA: SELECT, UPDATE Y DELETE

SELECT count (escribo lo que quiero que me cuente count por ejemplo cantidad de empleados. FirstName) FROM Emplooyes y te va a traer el número
a esto si yo le agrego SELECT count(FirstName) AS Cantidad_empleados FROM Emplooyes me re define el campo

SELECT sum(Price) FROM Employes. Esto me suma todos los valres de precio

AVG = Nos devuelve el promedio 
SELECT AVG (Price) FROM Products
y a esto puedo sumarle ROUND que redondea el valor 
SELECT ROUND (AVG(PRICE)) FROM Products
Si quisiera agregar decimales le agrego el párametro de la cantidad de decimales que quiero
SELECT ROUND(AVG(PRICE),2) FROM Products
SELECT MIN () Me devuelve el valor MINIMO

GROUP BY | HAVING
La clausula GROUP BY se utiliza para agrupar uno o varios REGISTROS según uno o varios VALORES de las columnas.

HAVING Filtra grupos, se usa después del group by

MODELO-TABLA RELACIONAL | SUBCONSULTAS 
funciones de agregación, nos permite agrupar datos, resumirlos e incluso trabajar con estadisticas sobre los datos.
Se utilizan con la clausula SELECT function ()
Utilizando estas funciones podemos traer datos de tablas, ETC 

Normalmente las subconsultas no son la mejor forma de relacionar las tablas. Para eso se suele utilizar JOIN

Las subconsultas suelen ser select. Esto nos suele devolver un valor 


tenemos una JERARQUIA : 
SIEMPRE primero usamos el SELECT para aclarar DONDE vamos a estar trabajando
2do: FILTRAR registros, por ej: WHERE
DESPUÉS podríamos agrupar registros - GROUP BY
Luego, podemos usar HAVING que este no puede funcionar sin GROUP BY NO SIRVE. Y DENTRO del HAVING podemos usar operadores de comparación, lógicos y funciones de agregación. LO QUE NO PODEMOS hacer es COMBINAR funciones de agrupaciones
Después , ORDER BY para ordernar los resultados
Y POR ÚLTIMO, PODRÍAMOS USAR LIMIT